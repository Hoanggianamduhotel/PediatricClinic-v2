import { useState } from "react";
import { supabase } from "./supabaseClient";

interface InToaThuocProps {
  visitID: string;
}

interface Thuoc {
  ten_thuoc: string;
  so_lan_dung: number;
  so_luong_moi_lan: number;
  tong_so_luong: number;
}

interface ToaThuocPayload {
  tenBenhNhan: string;
  chanDoan: string;
  ngayKham: string;
  tenBacSi: string;
  danhSachThuoc: Thuoc[];
}

const InToaThuoc = ({ visitID }: InToaThuocProps) => {
  const [loading, setLoading] = useState(false);
  const [toaThuoc, setToaThuoc] = useState<ToaThuocPayload | null>(null);

  const fetchVisitData = async () => {
    const { data: kham, error: errKham } = await supabase
      .from("khambenh")
      .select("*, benhnhan_id, bacsi_id")
      .eq("id", visitID)
      .single();
    if (errKham || !kham) throw new Error("Kh√¥ng t√¨m th·∫•y th√¥ng tin kh√°m");
    return kham;
  };

  const fetchPatientName = async (benhnhan_id: string) => {
    const { data: benhnhan, error: errBN } = await supabase
      .from("benhnhan")
      .select("ho_ten")
      .eq("id", benhnhan_id)
      .single();
    if (errBN || !benhnhan) throw new Error("Kh√¥ng t√¨m th·∫•y b·ªánh nh√¢n");
    return benhnhan.ho_ten;
  };

  const fetchToaThuoc = async (khambenh_id: string) => {
    const { data: toa, error: errToa } = await supabase
      .from("toathuoc")
      .select("thuoc_id, so_lan_dung, so_luong_moi_lan, tong_so_luong")
      .eq("khambenh_id", khambenh_id);
    if (errToa || !toa) throw new Error("Kh√¥ng c√≥ thu·ªëc trong toa");
    return toa;
  };

  const fetchDrugNames = async (thuocIDs: string[]) => {
    const { data: danhSachThuoc, error: errThuoc } = await supabase
      .from("thuoc")
      .select("id, ten_thuoc")
      .in("id", thuocIDs);
    if (errThuoc || !danhSachThuoc) throw new Error("L·ªói l·∫•y t√™n thu·ªëc");
    return danhSachThuoc;
  };

  const fetchDoctorName = async (bacsi_id: string) => {
    const { data: bacsi, error: errBacSi } = await supabase
      .from("profiles")
      .select("ten_bac_si")
      .eq("id", bacsi_id)
      .single();
    if (errBacSi || !bacsi) throw new Error("Kh√¥ng t√¨m th·∫•y b√°c sƒ©");
    return bacsi.ten_bac_si;
  };

  const handleClickInToa = async () => {
    setLoading(true);

    try {
      const kham = await fetchVisitData();
      const benhnhanName = await fetchPatientName(kham.benhnhan_id);
      const toa = await fetchToaThuoc(kham.id);
      const thuocIDs = toa.map((t: any) => t.thuoc_id);
      const danhSachThuoc = await fetchDrugNames(thuocIDs);
      const bacsiName = await fetchDoctorName(kham.bacsi_id);

      // Combine the data into a payload
      const payload: ToaThuocPayload = {
        tenBenhNhan: benhnhanName,
        chanDoan: kham.chan_doan,
        ngayKham: kham.ngay_kham,
        tenBacSi: bacsiName,
        danhSachThuoc: toa.map((item: any) => {
          const tenThuocObj = danhSachThuoc.find(
            (t: any) => t.id === item.thuoc_id
          );
          return {
            ...item,
            ten_thuoc: tenThuocObj?.ten_thuoc || "Kh√¥ng r√µ",
          };
        }),
      };

      setToaThuoc(payload);

      // Open print window
      const printWindow = window.open("", "_blank", "width=800,height=600");
      if (!printWindow) {
        alert("Kh√¥ng th·ªÉ m·ªü c·ª≠a s·ªï in. Vui l√≤ng t·∫Øt ch·∫∑n popup.");
        setLoading(false);
        return;
      }

      printWindow.document.write(`
        <html>
          <head>
            <title>In Toa Thu·ªëc</title>
            <style>
              @page { size: A5; margin: 15mm; }
              body { font-family: Arial, sans-serif; padding: 0; margin: 0; }
              h1, h2, h3, p { margin: 0 0 8px; }
              .container { padding: 10px; }
              .header { text-align: center; margin-bottom: 20px; }
              .thuoc-list { margin-top: 15px; }
              .thuoc-item { margin-bottom: 6px; }
            </style>
          </head>
          <body>
            <div class="container">
              <div class="header">
                <h1>üßæ TOA THU·ªêC</h1>
              </div>
              <p><strong>B·ªánh nh√¢n:</strong> ${payload.tenBenhNhan}</p>
              <p><strong>Ch·∫©n ƒëo√°n:</strong> ${payload.chanDoan}</p>
              <p><strong>Ng√†y kh√°m:</strong> ${new Date(
                payload.ngayKham
              ).toLocaleDateString()}</p>
              <p><strong>B√°c sƒ©:</strong> ${payload.tenBacSi}</p>
              <h3>üíä Danh s√°ch thu·ªëc:</h3>
              <div class="thuoc-list">
                ${
                  payload.danhSachThuoc.length > 0
                    ? payload.danhSachThuoc
                        .map(
                          (thuoc) => ` 
                          <div class="thuoc-item">
                            ‚Ä¢ <strong>${thuoc.ten_thuoc}</strong>: ${thuoc.so_lan_dung} l·∫ßn/ng√†y,
                            m·ªói l·∫ßn ${thuoc.so_luong_moi_lan} vi√™n ‚ûú T·ªïng: ${thuoc.tong_so_luong} vi√™n
                          </div>`
                        )
                        .join("")
                    : `<div>Kh√¥ng c√≥ thu·ªëc trong toa.</div>`
                }
              </div>
            </div>
          </body>
        </html>
      `);

      printWindow.document.close();
      printWindow.focus();
      printWindow.onload = () => {
        printWindow.print();
        printWindow.close();
      };
    } catch (err: any) {
      alert("L·ªói: " + err.message);
      console.error("L·ªói khi in toa thu·ªëc:", err);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="mt-6">
      <button
        onClick={handleClickInToa}
        className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
        disabled={loading}
      >
        üñ®Ô∏è In toa thu·ªëc
      </button>

      {loading && <p className="mt-4">ƒêang t·∫£i v√† chu·∫©n b·ªã in...</p>}

      {toaThuoc && (
        <div className="mt-4">
          <h3 className="font-semibold">Xem nhanh n·ªôi dung toa thu·ªëc:</h3>
          <pre>{JSON.stringify(toaThuoc, null, 2)}</pre>
        </div>
      )}
    </div>
  );
};

export default InToaThuoc;
