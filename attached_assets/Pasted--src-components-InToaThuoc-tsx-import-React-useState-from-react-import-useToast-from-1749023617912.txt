// src/components/InToaThuoc.tsx
import React, { useState } from "react";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import { Printer, Eye } from "lucide-react";

interface PatientInfoType {
  ho_ten?: string;
  ngay_sinh?: string;
  thang_tuoi?: number;
  can_nang?: string;
  dia_chi?: string;
  so_dien_thoai?: string;
}

interface InToaThuocProps {
  khambenhID: string;
  disabled?: boolean;
  patientInfo?: PatientInfoType | null;
}

interface ToaThuocData {
  tenBenhNhan: string;
  chanDoan: string;
  ngayKham: string;
  tenBacSi: string;
  ngayTaiKham?: string;
  ngaySinh?: string;
  thangTuoi?: number;
  canNang?: string;
  diaChi?: string;
  soDienThoai?: string;
  danhSachThuoc: {
    ten_thuoc: string;
    don_vi: string;
    so_lan_dung: number;
    so_luong_moi_lan: number;
    tong_so_luong: number;
    ghi_chu?: string;
  }[];
}

export default function InToaThuoc({
  khambenhID,
  disabled = false,
  patientInfo,
}: InToaThuocProps) {
  const [loading, setLoading] = useState(false);
  const [showPreview, setShowPreview] = useState(false);
  const [toaThuocData, setToaThuocData] = useState<ToaThuocData | null>(null);
  const { toast } = useToast();

  const fetchToaThuocData = async (): Promise<ToaThuocData> => {
    try {
      const response = await apiRequest("GET", `/api/toa-thuoc/${khambenhID}`);
      if (!response.ok) {
        throw new Error("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu toa thu·ªëc");
      }
      const data = await response.json();

      if (patientInfo) {
        return {
          ...data,
          tenBenhNhan: patientInfo.ho_ten || data.tenBenhNhan,
          ngaySinh: patientInfo.ngay_sinh || data.ngaySinh,
          thangTuoi: patientInfo.thang_tuoi || data.thangTuoi,
          canNang: patientInfo.can_nang || data.canNang,
          diaChi: patientInfo.dia_chi || data.diaChi,
          soDienThoai: patientInfo.so_dien_thoai || data.soDienThoai,
        };
      }
      return data;
    } catch (error) {
      throw new Error("L·ªói k·∫øt n·ªëi server khi l·∫•y toa thu·ªëc");
    }
  };

  const generatePrintHTML = (data: ToaThuocData): string => {
    // ... (gi·ªØ nguy√™n logic generate HTML nh∆∞ c≈©)
    return `<!DOCTYPE html> ...`;
  };

  const handlePreview = async () => {
    if (toaThuocData) {
      setShowPreview((prev) => !prev);
      return;
    }
    setLoading(true);
    try {
      const data = await fetchToaThuocData();
      setToaThuocData(data);
      setShowPreview(true);
      toast({ title: "Th√†nh c√¥ng", description: "ƒê√£ t·∫£i d·ªØ li·ªáu toa thu·ªëc" });
    } catch (err: any) {
      toast({
        title: "L·ªói",
        description: err.message || "Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu toa thu·ªëc",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const handlePrint = async () => {
    setLoading(true);
    try {
      let data = toaThuocData;
      if (!data) {
        data = await fetchToaThuocData();
        setToaThuocData(data);
      }

      if (data.danhSachThuoc.length === 0) {
        toast({ title: "C·∫£nh b√°o", description: "Toa thu·ªëc tr·ªëng, kh√¥ng th·ªÉ in", variant: "destructive" });
        return;
      }

      const printWindow = window.open("", "_blank", "width=800,height=600");
      if (!printWindow) {
        toast({ title: "L·ªói", description: "Kh√¥ng th·ªÉ m·ªü c·ª≠a s·ªï in. H√£y b·∫≠t popup.", variant: "destructive" });
        return;
      }

      printWindow.document.write(generatePrintHTML(data));
      printWindow.document.close();
      printWindow.focus();
      setTimeout(() => {
        printWindow.print();
        printWindow.onafterprint = () => printWindow.close();
      }, 500);

      toast({ title: "Th√†nh c√¥ng", description: "ƒê√£ g·ª≠i toa thu·ªëc ƒë·∫øn m√°y in" });
    } catch (err: any) {
      toast({ title: "L·ªói in toa thu·ªëc", description: err?.message || "Kh√¥ng th·ªÉ in toa thu·ªëc", variant: "destructive" });
    } finally {
      setLoading(false);
    }
  };

  if (!khambenhID) return null;

  return (
    // Th·∫ª g·ªëc ph·∫£i c√≥ className="relative" ƒë·ªÉ hai n√∫t absolute b√™n trong ƒë·ª©ng ƒë√∫ng v·ªã tr√≠
    <div className="relative">
      {/* V√πng hi·ªÉn th·ªã preview + l·ªãch s·ª≠ toa thu·ªëc */}
      <div className="space-y-4 pr-8">
        {showPreview && toaThuocData && (
          <div className="mt-4 p-4 bg-gray-50 dark:bg-gray-800 rounded-lg border">
            <h4 className="font-semibold text-gray-900 dark:text-gray-100 mb-3">
              üìã Xem tr∆∞·ªõc toa thu·ªëc
            </h4>
            <div className="space-y-2 text-sm">
              <div><strong>B·ªánh nh√¢n:</strong> {toaThuocData.tenBenhNhan}</div>
              <div><strong>Ch·∫©n ƒëo√°n:</strong> {toaThuocData.chanDoan}</div>
              <div>
                <strong>Ng√†y kh√°m:</strong> {new Date(toaThuocData.ngayKham).toLocaleDateString("vi-VN")}
              </div>
              <div><strong>B√°c sƒ©:</strong> {toaThuocData.tenBacSi}</div>

              <div className="mt-3">
                <strong>Danh s√°ch thu·ªëc ({toaThuocData.danhSachThuoc.length} lo·∫°i):</strong>
                {toaThuocData.danhSachThuoc.length > 0 ? (
                  <ul className="mt-2 space-y-2">
                    {toaThuocData.danhSachThuoc.map((thuoc, idx) => (
                      <li key={idx} className="bg-white dark:bg-gray-700 p-2 rounded border-l-4 border-blue-500">
                        <div className="font-medium text-blue-700 dark:text-blue-300">
                          {idx + 1}. {thuoc.ten_thuoc}
                        </div>
                        <div className="text-gray-600 dark:text-gray-300">
                          {thuoc.so_lan_dung} l·∫ßn/ng√†y √ó {thuoc.so_luong_moi_lan} {thuoc.don_vi} = {thuoc.tong_so_luong} {thuoc.don_vi}
                        </div>
                        {thuoc.ghi_chu && (
                          <div className="text-gray-500 dark:text-gray-400 italic text-xs">
                            {thuoc.ghi_chu}
                          </div>
                        )}
                      </li>
                    ))}
                  </ul>
                ) : (
                  <div className="text-gray-500 dark:text-gray-400 italic mt-2">
                    Ch∆∞a c√≥ thu·ªëc trong toa
                  </div>
                )}
              </div>
            </div>
          </div>
        )}
      </div>

      {/* 2 n√∫t d·ªçc b√™n ph·∫£i: Xem tr∆∞·ªõc v√† In toa thu·ªëc */}
      <div className="absolute right-0 top-0 flex flex-col space-y-2">
        <button
          onClick={handlePreview}
          disabled={loading || disabled}
          className={`
            transition-all duration-300 ease-in-out flex items-center justify-center 
            text-white text-sm font-medium shadow-lg
            bg-green-500 hover:bg-green-600
            ${loading || disabled ? "opacity-50 cursor-not-allowed" : "cursor-pointer"}
          `}
          style={{
            height: "60px",
            width: "24px",
            writingMode: "vertical-rl",
            textOrientation: "mixed",
            borderRadius: "4px 0 0 4px",
          }}
        >
          {loading ? "‚Ä¶" : <Eye size={16} />}
        </button>

        <button
          onClick={handlePrint}
          disabled={loading || disabled}
          className={`
            transition-all duration-300 ease-in-out flex items-center justify-center 
            text-white text-sm font-medium shadow-lg
            bg-blue-600 hover:bg-blue-700
            ${loading || disabled ? "opacity-50 cursor-not-allowed" : "cursor-pointer"}
          `}
          style={{
            height: "60px",
            width: "24px",
            writingMode: "vertical-rl",
            textOrientation: "mixed",
            borderRadius: "4px 0 0 4px",
          }}
        >
          {loading ? "‚Ä¶" : <Printer size={16} />}
        </button>
      </div>
    </div>
  );
}
